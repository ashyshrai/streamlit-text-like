{"version":3,"sources":["CustomTextLike.tsx","index.tsx"],"names":["streamlit_text_like","state","hasClickedLike","hasClickedDislike","render","props","theme","text","args","color_text","color_background","fontSize","fontFamily","fontWeight","style","display","alignItems","justifyContent","width","margin","color","background","marginBottom","padding","borderRadius","IconButton","onClick","onClickedLike","onClickedDislike","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","CustomTextLike","document","getElementById"],"mappings":"oSAkBMA,E,4MACGC,MAAQ,CAACC,gBAAgB,EAAMC,mBAAmB,G,EAElDC,OAAS,WAKI,EAAKC,MAAfC,MAAR,IAGMC,EAAO,EAAKF,MAAMG,KAAX,KACPC,EAAa,EAAKJ,MAAMG,KAAX,WACbE,EAAmB,EAAKL,MAAMG,KAAX,iBACnBG,EAAW,EAAKN,MAAMG,KAAX,UACXI,EAAa,EAAKP,MAAMG,KAAX,YACbK,EAAW,EAAKR,MAAMG,KAAX,YAEjB,OACM,yBAAKM,MAAO,CAACC,QAAQ,OAAQC,WAAW,SAAUC,eAAe,aAAaC,MAAM,OAAOC,OAAO,QAClG,uBACAL,MAAO,CAACM,MAAMX,EACdY,WAAWX,EACXC,SAASA,EACTE,WAAWA,EACXS,aAAa,MACbV,WAAWA,EACXW,QAAQ,OACRC,aAAa,QACZjB,GAEC,kBAACkB,EAAA,EAAD,CAAYC,QAAS,EAAKC,eACxB,kBAAC,IAAD,CAAaP,MAAO,EAAKnB,MAAMC,eAAe,UAAU,cAG1D,kBAACuB,EAAA,EAAD,CAAYC,QAAS,EAAKE,kBACxB,kBAAC,IAAD,CAAkBR,MAAO,EAAKnB,MAAME,kBAAkB,QAAQ,gB,EAMlEwB,cAAgB,WAGtB,EAAKE,UACD,SAAAC,GAAS,MAAK,CAAC5B,gBAAkB,EAAKD,MAAMC,mBAC9C,WAAW,EAAKD,MAAMC,eAAiB6B,IAAUC,kBAAkB,SAAiBD,IAAUC,kBAAkB,WAE/G,EAAKH,UACJ,SAAAC,GAAS,MAAK,CAAC3B,mBAAmB,O,EAIhCyB,iBAAmB,WAEzB,EAAKC,UACD,SAAAC,GAAS,MAAK,CAAC3B,mBAAqB,EAAKF,MAAME,sBACjD,WAAW,EAAKF,MAAME,kBAAoB4B,IAAUC,kBAAkB,YAAoBD,IAAUC,kBAAkB,WAGrH,EAAKH,UACJ,SAAAC,GAAS,MAAK,CAAC5B,gBAAgB,O,YA9DL+B,KAuEnBC,cAAwBlC,GCrFvCmC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.73a72572.chunk.js","sourcesContent":["import { BaseProvider, LightTheme } from \"baseui\"\nimport React from \"react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ThumbDownAltIcon from '@mui/icons-material/ThumbDownAlt';\n\nimport {\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from \"streamlit-component-lib\"\n\n\ninterface State {\n hasClickedLike: boolean,\n hasClickedDislike: boolean,\n}\n\nclass streamlit_text_like extends StreamlitComponentBase<State> {\n  public state = {hasClickedLike: false,hasClickedDislike: false}\n\n  public render = (): React.ReactNode => {\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const text = this.props.args[\"text\"] as string\n    const color_text = this.props.args[\"color_text\"] as string\n    const color_background = this.props.args[\"color_background\"] as string\n    const fontSize = this.props.args['font_size'] as string\n    const fontFamily = this.props.args['font_family'] as string\n    const fontWeight=this.props.args['font_weight'] as number\n\n    return (\n          <div style={{display:'flex', alignItems:'center', justifyContent:'flex-start',width:'100%',margin:'0px',}}>\n          <p\n          style={{color:color_text,\n          background:color_background,\n          fontSize:fontSize,\n          fontWeight:fontWeight,\n          marginBottom:'0px',\n          fontFamily:fontFamily,\n          padding:'12px',\n          borderRadius:'6px',}}>\n          {text}\n          </p>\n            <IconButton onClick={this.onClickedLike} >\n              <ThumbUpIcon color={this.state.hasClickedLike?'primary':'disabled'}/>\n            </IconButton>\n\n            <IconButton onClick={this.onClickedDislike} >\n              <ThumbDownAltIcon color={this.state.hasClickedDislike?'error':'disabled'}/>\n            </IconButton>\n          </div>\n    )\n  }\n\n  private onClickedLike = (): void => {\n\n\n    this.setState(\n        prevState => ({hasClickedLike: ! this.state.hasClickedLike}),\n      () => {if (this.state.hasClickedLike) {Streamlit.setComponentValue('liked');} else {Streamlit.setComponentValue('None');}}\n      );\n       this.setState(\n        prevState => ({hasClickedDislike: false})\n      );\n  }\n\n  private onClickedDislike = (): void => {\n\n    this.setState(\n        prevState => ({hasClickedDislike: ! this.state.hasClickedDislike}),\n      () => {if (this.state.hasClickedDislike) {Streamlit.setComponentValue('disliked');} else {Streamlit.setComponentValue('None');}}\n      );\n\n       this.setState(\n        prevState => ({hasClickedLike: false})\n      );\n\n    }\n\n\n\n}\n\nexport default withStreamlitConnection(streamlit_text_like)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomTextLike from \"./CustomTextLike\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomTextLike/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}